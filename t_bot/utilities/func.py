from config import alphabet
from database.users import User


def get_name(hotel: dict) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    :param hotel: dict
    :return: dict
    """
    return {'name': hotel.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}


def get_address(hotel: dict) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    :param hotel: dict
    :return: dict
    """
    return {'address': hotel.get('address', {}).get('streetAddress', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}


def get_star_rating(hotel: dict) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–≤—ë–∑–¥–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    :param hotel: dict
    :return: dict
    """
    try:
        return {"starRating": '‚≠ê' * int(hotel['starRating'])}
    except KeyError:
        return {"starRating": " "}


def get_unformatted_rating(hotel: dict) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    :param hotel: dict
    :return: dict
    """
    return {"unformattedRating": hotel.get('guestReviews', {}).get('unformattedRating', '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω.')}


def get_landmarks(hotel: dict) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    :param hotel: dict
    :return: dict
    """
    return {"landmarks": hotel.get('landmarks', {})[0].get('distance', '–î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.')}


def get_price(hotel: dict) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    :param hotel: dict
    :return: dict
    """
    try:
        return {"price": f"{int(hotel['ratePlan']['price']['exactCurrent']):,} —Ä—É–±."}
    except KeyError:
        return {"price": "–£—Ç–æ—á–Ω—è–π—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Å–∞–π—Ç–µ."}


def get_total_price(hotel: dict, total_day: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    :param hotel: dict
    :return: dict
    """
    try:
        return {"total_price": f"{int(hotel['ratePlan']['price']['exactCurrent'] * total_day):,} —Ä—É–±."}
    except KeyError:
        return {"total_price": "–£—Ç–æ—á–Ω—è–π—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Å–∞–π—Ç–µ."}


def get_site(hotel: dict) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    :param hotel: dict
    :return: dict
    """
    return {"site": f'https://www.hotels.com/ho{hotel["id"]}/'}


def format_message_for_user(hotel: dict, total_day: int) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ()
    :param hotel: dict
    :param total_day: int
    :return: str
    """
    message = f"""
üè® <a href="{hotel['site']}/">{hotel['name']}</a> {hotel['starRating']}        
üó∫ <b>–ê–¥—Ä–µ—Å:</b> {hotel['address']}
üìà <b>–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è:</b> {hotel['unformattedRating']}
üß≠ <b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞:</b> {hotel['landmarks']}
üí≤ <b>–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:</b> {hotel['price']}
üí≤ <b>–¶–µ–Ω–∞ –∑–∞ {total_day} (–¥–Ω—è/–¥–Ω–µ–π):</b> {hotel['total_price']} 
      """
    return message


def format_message_for_user_history(hotel: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–µ–ª—è –∏–∑ db –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param hotel: dict
    :return: str
    """
    message = f"""
üè® <a href="{hotel['site']}/">{hotel['name']}</a> {hotel['starRating']}        
üó∫ <b>–ê–¥—Ä–µ—Å:</b> {hotel['address']}
üí≤ <b>–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:</b> {hotel['price']}
      """
    return message


def city_correct(name_city: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–ª–µ–Ω—ã–π –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    :param name_city: str
    :return: bool
    """
    return all(sym in alphabet for sym in name_city.lower())


def price_correct(min_max_price: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–ª–µ–Ω—ã–π –≤–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    :param min_max_price: str
    :return: bool
    """
    price_list = min_max_price.split()
    if len(price_list) == 2 and price_list[0].isdigit() and price_list[1].isdigit() and \
            -1 < int(price_list[0]) < int(price_list[1]):
        return True
    return False


def distance_correct(distance: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
    :param distance: str
    :return: bool
    """
    return distance.isdigit() and int(distance) >= 0


def check_distance(user_id: str, hotel: dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–µ–ª—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    :param user_id: str
    :param hotel: dict
    :return: bool
    """
    user = User.get_user(user_id)
    if user.command != '/bestdeal':
        return True
    dist = hotel.get('landmarks', [{}])[0].get('distance')
    if float(user.distance) >= float(dist.replace(',', '.').split()[0]):
        return True
